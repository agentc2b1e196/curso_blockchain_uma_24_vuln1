{"abi":[{"type":"function","name":"claimRewards","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"doLock","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"doSlash","inputs":[{"name":"badUser","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"doStake","inputs":[],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"doUnlock","inputs":[{"name":"user","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"doUnstake","inputs":[{"name":"amount","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setShop","inputs":[{"name":"shopAddress","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"claimRewards()":"372500ab","doLock(address,uint256)":"1e89e058","doSlash(address)":"74cb9ed8","doStake()":"4efa7e70","doUnlock(address,uint256)":"076622e2","doUnstake(uint256)":"4697fbfa","setShop(address)":"ce965f6a"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.25+commit.b61c2a91\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"claimRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"badUser\",\"type\":\"address\"}],\"name\":\"doSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"doUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shopAddress\",\"type\":\"address\"}],\"name\":\"setShop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Faillapop team :D \",\"custom:ctf\":\"This contract is part of JC's mock-audit exercise at https://github.com/jcr-security/solidity-security-teaching-resources\",\"kind\":\"dev\",\"methods\":{\"doLock(address,uint256)\":{\"params\":{\"amount\":\"The amount of funds to lock\",\"user\":\"The address of the user that is selling\"}},\"doSlash(address)\":{\"params\":{\"badUser\":\"The address of the malicious user to be slashed\"}},\"doUnstake(uint256)\":{\"params\":{\"amount\":\"The amount of funds to unstake \"}},\"setShop(address)\":{\"params\":{\"shopAddress\":\"The address of the shop contract\"}}},\"title\":\"Interface of FaillaPop vault\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claimRewards()\":{\"notice\":\"Claim rewards generated by slashing malicious users.  First checks if the user is elegible through the checkPrivilege function that will revert if not. \"},\"doLock(address,uint256)\":{\"notice\":\"Lock funds for selling purposes, the funds are locked until the sale is completed\"},\"doSlash(address)\":{\"notice\":\"Slash funds if the user is considered malicious by the DAO\"},\"doStake()\":{\"notice\":\"Stake attached funds in the vault for later locking, the users must do it on their own\"},\"doUnlock(address,uint256)\":{\"notice\":\"Unlock funds after the sale is completed\"},\"doUnstake(uint256)\":{\"notice\":\"Unstake unlocked funds from the vault, the user must do it on their own\"},\"setShop(address)\":{\"notice\":\"Sets the shop address as the new Control role\"}},\"notice\":\"The contract allows anyone to stake and unstake Ether. When a seller publish a new item in the shop, the funds are locked during the sale. If the user is considered malicious by the DAO, the funds are slashed. \",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IFP_Vault.sol\":\"IFP_Vault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@openzeppelin/contracts@v5.0.1/=lib/openzeppelin-contracts/contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/interfaces/IFP_Vault.sol\":{\"keccak256\":\"0xf2d48a92bbd5a2eecf84713ad313f128406ec2637b2609715538f9480308a70b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://19c6e027c4dd7d2a3fd174ec3f7b70e22f228bdaf5e35bfc11618d0d77a0c282\",\"dweb:/ipfs/QmT3mQZcQSp5QZuvC3iRTKwBuDb4iZPWFG8bb8KUGXzqZo\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.25+commit.b61c2a91"},"language":"Solidity","output":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"function","name":"claimRewards"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"doLock"},{"inputs":[{"internalType":"address","name":"badUser","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"doSlash"},{"inputs":[],"stateMutability":"payable","type":"function","name":"doStake"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"doUnlock"},{"inputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"doUnstake"},{"inputs":[{"internalType":"address","name":"shopAddress","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"setShop"}],"devdoc":{"kind":"dev","methods":{"doLock(address,uint256)":{"params":{"amount":"The amount of funds to lock","user":"The address of the user that is selling"}},"doSlash(address)":{"params":{"badUser":"The address of the malicious user to be slashed"}},"doUnstake(uint256)":{"params":{"amount":"The amount of funds to unstake "}},"setShop(address)":{"params":{"shopAddress":"The address of the shop contract"}}},"version":1},"userdoc":{"kind":"user","methods":{"claimRewards()":{"notice":"Claim rewards generated by slashing malicious users.  First checks if the user is elegible through the checkPrivilege function that will revert if not. "},"doLock(address,uint256)":{"notice":"Lock funds for selling purposes, the funds are locked until the sale is completed"},"doSlash(address)":{"notice":"Slash funds if the user is considered malicious by the DAO"},"doStake()":{"notice":"Stake attached funds in the vault for later locking, the users must do it on their own"},"doUnlock(address,uint256)":{"notice":"Unlock funds after the sale is completed"},"doUnstake(uint256)":{"notice":"Unstake unlocked funds from the vault, the user must do it on their own"},"setShop(address)":{"notice":"Sets the shop address as the new Control role"}},"version":1}},"settings":{"remappings":["@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts@v5.0.1/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IFP_Vault.sol":"IFP_Vault"},"evmVersion":"paris","libraries":{}},"sources":{"src/interfaces/IFP_Vault.sol":{"keccak256":"0xf2d48a92bbd5a2eecf84713ad313f128406ec2637b2609715538f9480308a70b","urls":["bzz-raw://19c6e027c4dd7d2a3fd174ec3f7b70e22f228bdaf5e35bfc11618d0d77a0c282","dweb:/ipfs/QmT3mQZcQSp5QZuvC3iRTKwBuDb4iZPWFG8bb8KUGXzqZo"],"license":"GPL-3.0"}},"version":1},"id":49}